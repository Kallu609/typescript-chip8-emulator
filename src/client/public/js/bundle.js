/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/client/app.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./src/client/Chip8.ts":
/*!*****************************!*\
  !*** ./src/client/Chip8.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar FONTSET = [\r\n    0xF0, 0x90, 0x90, 0x90, 0xF0,\r\n    0x20, 0x60, 0x20, 0x20, 0x70,\r\n    0xF0, 0x10, 0xF0, 0x80, 0xF0,\r\n    0xF0, 0x10, 0xF0, 0x10, 0xF0,\r\n    0x90, 0x90, 0xF0, 0x10, 0x10,\r\n    0xF0, 0x80, 0xF0, 0x10, 0xF0,\r\n    0xF0, 0x80, 0xF0, 0x90, 0xF0,\r\n    0xF0, 0x10, 0x20, 0x40, 0x40,\r\n    0xF0, 0x90, 0xF0, 0x90, 0xF0,\r\n    0xF0, 0x90, 0xF0, 0x10, 0xF0,\r\n    0xF0, 0x90, 0xF0, 0x90, 0x90,\r\n    0xE0, 0x90, 0xE0, 0x90, 0xE0,\r\n    0xF0, 0x80, 0x80, 0x80, 0xF0,\r\n    0xE0, 0x90, 0x90, 0x90, 0xE0,\r\n    0xF0, 0x80, 0xF0, 0x80, 0xF0,\r\n    0xF0, 0x80, 0xF0, 0x80, 0x80 // F\r\n];\r\nvar Chip8 = /** @class */ (function () {\r\n    function Chip8() {\r\n        this.initialize();\r\n        this.loadRom('PONG');\r\n        // this.emulationLoop();\r\n    }\r\n    Chip8.prototype.initialize = function () {\r\n        this.memory = new Uint8Array(4096);\r\n        this.pc = 0x200;\r\n        this.V = new Uint8Array(16);\r\n        this.I = 0;\r\n        this.stack = Array(16).fill(0);\r\n        this.sp = 0;\r\n        this.delayTimer = 0;\r\n        this.soundTimer = 0;\r\n        this.gfx = new Array(2048).fill(0);\r\n        this.frequency = 60;\r\n        this.keys = new Array(16).fill(0);\r\n        this.loadFontset();\r\n    };\r\n    Chip8.prototype.log = function (opcode, text) {\r\n        var hexRepr = '0x' + (opcode).toString(16).toUpperCase().padStart(4, '0');\r\n        console.log(hexRepr + \"   \" + text);\r\n    };\r\n    Chip8.prototype.loadFontset = function () {\r\n        var _this = this;\r\n        // Fontset starts from 0x00 (?)\r\n        FONTSET.forEach(function (byte, i) {\r\n            _this.memory[i] = byte;\r\n        });\r\n    };\r\n    Chip8.prototype.loadRom = function (romName) {\r\n        var _this = this;\r\n        window.fetch('roms/PONG')\r\n            .then(function (res) { return res.arrayBuffer(); })\r\n            .then(function (res) {\r\n            console.log(\"ROM Size: \" + res.byteLength + \" bytes\");\r\n            console.log(res);\r\n            for (var i = 0; i < res.byteLength; i++) {\r\n                _this.memory[i + 512] = res[i];\r\n            }\r\n        });\r\n    };\r\n    Chip8.prototype.emulationLoop = function () {\r\n        var _this = this;\r\n        var start = +new Date();\r\n        this.emulateCycle();\r\n        var now = +new Date();\r\n        var deltaTime = now - start;\r\n        var nextCycle = 1000 / this.frequency - (deltaTime);\r\n        setTimeout(function () {\r\n            _this.emulationLoop();\r\n        }, nextCycle);\r\n    };\r\n    Chip8.prototype.emulateCycle = function () {\r\n        // Fetch Opcode\r\n        var opcode = this.memory[this.pc] << 8 | this.memory[this.pc + 1];\r\n        // Decode & execute Opcode\r\n        switch (opcode & 0xF000) {\r\n            case 0x0000:\r\n                switch (opcode & 0x00FF) {\r\n                    case 0x00E0: // Clears the screen.\r\n                        this.log(opcode, \"Clear the screen\");\r\n                        break;\r\n                    case 0x00EE: // Returns from a subroutine\r\n                        this.sp--;\r\n                        this.pc = this.stack[this.sp];\r\n                        this.pc += 2;\r\n                        this.log(opcode, \"Return from subroutine (sp: \" + this.sp + \")\\n\");\r\n                        break;\r\n                    default:\r\n                        this.log(opcode, 'Unknown opcode');\r\n                        process.exit();\r\n                }\r\n                break;\r\n            case 0x1000: // Jumps to address NNN.\r\n                this.pc = opcode & 0x0FFF;\r\n                this.log(opcode, \"Goto 0x0\" + (opcode & 0x0FFF));\r\n                break;\r\n            case 0x2000:\r\n                { // Calls subroutine at NNN.\r\n                    var nnn = opcode & 0x0FFF;\r\n                    this.stack[this.sp] = this.pc;\r\n                    this.sp++;\r\n                    this.pc = nnn;\r\n                    var callAddress = \"0x\" + nnn.toString(16).toUpperCase().padStart(4, '0');\r\n                    this.log(opcode, \"Subroutine call to \" + callAddress + \" (sp: \" + this.sp + \")\\n\");\r\n                }\r\n                break;\r\n            case 0x3000:\r\n                { // Skips the next instruction if VX equals NN.\r\n                    var x = (opcode & 0x0F00) >> 8;\r\n                    var nn = (opcode & 0x00FF);\r\n                    if (this.V[x] === nn) {\r\n                        this.pc += 4;\r\n                    }\r\n                    else {\r\n                        this.pc += 2;\r\n                    }\r\n                    this.log(opcode, \"Skip if V\" + x + \" == \" + nn);\r\n                }\r\n                break;\r\n            case 0x4000:\r\n                { // Skips the next instruction if VX doesn't equal NN.\r\n                    var x = (opcode & 0x0F00) >> 8;\r\n                    var nn = (opcode & 0x00FF);\r\n                    if (this.V[x] !== nn) {\r\n                        this.pc += 4;\r\n                    }\r\n                    else {\r\n                        this.pc += 2;\r\n                    }\r\n                    this.log(opcode, \"Skip if V\" + ((opcode & 0x0F00) >> 8) + \" != \" + (opcode & 0x00FF));\r\n                }\r\n                break;\r\n            case 0x5000:\r\n                { // Skips the next instruction if VX equals VY.\r\n                    var x = (opcode & 0x0F00 >> 8);\r\n                    var y = (opcode & 0x00F0 >> 4);\r\n                    var equal = this.V[x] === this.V[y];\r\n                    if (equal) {\r\n                        this.pc += 4;\r\n                    }\r\n                    else {\r\n                        this.pc += 2;\r\n                    }\r\n                    this.log(opcode, \"if(X==Y) -> \" + equal);\r\n                }\r\n                break;\r\n            case 0x6000:\r\n                { // Sets VX to NN.\r\n                    var x = (opcode & 0x0F00) >> 8;\r\n                    var nn = opcode & 0x00FF;\r\n                    this.V[x] = nn;\r\n                    this.pc += 2;\r\n                    this.log(opcode, \"Set V\" + x + \" to \" + nn);\r\n                }\r\n                break;\r\n            case 0x7000:\r\n                { // Adds NN to VX. (Carry flag is not changed)\r\n                    var x = (opcode & 0x0F00) >> 8;\r\n                    var nn = opcode & 0x00FF;\r\n                    this.V[x] += nn;\r\n                    this.pc += 2;\r\n                    this.log(opcode, \"Add \" + nn + \" to V\" + x);\r\n                }\r\n                break;\r\n            case 0x8000:\r\n                { // Arithmetic\r\n                    var x = (opcode & 0x0F00) >> 8;\r\n                    var y = (opcode & 0x00F0) >> 4;\r\n                    switch (opcode & 0x000F) {\r\n                        case 0x0000: // Sets VX to the value of VY.\r\n                            this.V[x] = this.V[y];\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"Set V\" + x + \" to V\" + y);\r\n                            break;\r\n                        case 0x0001: // Sets VX to VX or VY. (Bitwise OR operation)\r\n                            this.V[x] = this.V[x] | this.V[y];\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"Set V\" + x + \" to V\" + x + \" | V\" + y);\r\n                            break;\r\n                        case 0x0002: // Sets VX to VX and VY. (Bitwise AND operation)\r\n                            this.V[x] = this.V[x] & this.V[y];\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"Set V\" + x + \" to V\" + x + \" & V\" + y);\r\n                            break;\r\n                        case 0x0003: // Sets VX to VX xor VY.\r\n                            this.V[x] = this.V[x] ^ this.V[y];\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"Set V\" + x + \" to V\" + x + \" ^ V\" + y);\r\n                            break;\r\n                        case 0x0004: // Adds VY to VX. VF is set to 1 when there's a carry, and to 0 when there isn't.\r\n                            this.V[0xF] = Number((this.V[x] += this.V[y]) > 255);\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"Add V\" + y + \" to V\" + x);\r\n                            break;\r\n                        case 0x0005: // VY is subtracted from VX. VF is set to 0 when there's a borrow, and 1 when there isn't.\r\n                            this.V[0xF] = Number((this.V[x] -= this.V[y]) < 0);\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"Substract V\" + y + \" to V\" + x);\r\n                            break;\r\n                        case 0x0006: // Shifts VY right by one and stores the result to VX (VY remains unchanged).\r\n                            // VF is set to the value of the least significant bit of VY before the shift.\r\n                            // (On some modern interpreters, VX is shifted instead, while VY is ignored.)\r\n                            this.V[0xF] = (this.V[y] & 0x1);\r\n                            this.V[x] = (this.V[y] >> 1);\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"V\" + x + \" to V\" + y + \" >> 1\");\r\n                            break;\r\n                        case 0x0007: // Sets VX to VY minus VX. VF is set to 0 when there's a borrow, and 1 when there isn't.\r\n                            this.V[0xF] = Number((this.V[x] -= (this.V[y]) - this.V[x]) < 0);\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"V\" + x + \" to V\" + x + \" - V\" + y);\r\n                            break;\r\n                        case 0x000E: // Shifts VY left by one and copies the result to VX.\r\n                            // VF is set to the value of the most significant bit of VY before the shift\r\n                            this.V[0xF] = (this.V[y]) >> 7;\r\n                            this.V[y] = this.V[y] << 1;\r\n                            this.V[x] = this.V[y];\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"V\" + x + \" to V\" + y + \" = V\" + y + \" << 1\");\r\n                            break;\r\n                        default:\r\n                            this.log(opcode, 'Unknown opcode');\r\n                            process.exit();\r\n                    }\r\n                }\r\n                break;\r\n            case 0x9000:\r\n                { // Skips the next instruction if VX doesn't equal VY.\r\n                    var x = (opcode & 0x0F00) >> 8;\r\n                    var y = (opcode & 0x00F0 >> 4);\r\n                    if (this.V[x] !== this.V[y]) {\r\n                        this.pc += 4;\r\n                    }\r\n                    else {\r\n                        this.pc += 2;\r\n                    }\r\n                    this.log(opcode, \"Skip next if V\" + x + \" (\" + this.V[y] + \") is not V\" + x + \" (\" + this.V[y] + \")\");\r\n                }\r\n                break;\r\n            case 0xA000:\r\n                { // Sets I to the address NNN.\r\n                    var nnn = opcode & 0xFFF;\r\n                    this.I = nnn;\r\n                    this.pc += 2;\r\n                    this.log(opcode, \"Set I to \" + nnn);\r\n                }\r\n                break;\r\n            case 0xB000:\r\n                { // Jumps to the address NNN plus V0.\r\n                    var nnn = opcode & 0xFFF;\r\n                    this.pc = this.V[0] + nnn;\r\n                    this.log(opcode, \"Goto V0 + 0x0\" + nnn + \" => \" + (this.V[0] + nnn));\r\n                }\r\n                break;\r\n            case 0xC000:\r\n                { // Sets VX to the result of a bitwise and operation on a random number.\r\n                    var x = (opcode & 0x0F00) >> 8;\r\n                    var nn = (opcode & 0x00FF);\r\n                    var random = Math.floor(Math.random() * 256);\r\n                    this.V[x] = (random & nn);\r\n                    this.pc += 2;\r\n                    this.log(opcode, \"Random to V\" + x + \": \" + (random & nn));\r\n                }\r\n                break;\r\n            case 0xD000:\r\n                { // Draws a sprite at coordinate (VX, VY)\r\n                    var x = (opcode & 0x0F00) >> 8;\r\n                    var y = (opcode & 0x00F0) >> 4;\r\n                    var height = opcode & 0x000F;\r\n                    this.V[0xF] = 0; // VF is set to 1 if any screen pixels are flipped from set to unset \r\n                    for (var yline = 0; yline < height; yline++) {\r\n                        var pixel = this.memory[this.I + yline];\r\n                        for (var xline = 0; xline < 8; xline++) {\r\n                            if ((pixel & (0x80 >> xline)) !== 0) {\r\n                                var bit = (x + xline + ((y + yline) * 64));\r\n                                if (this.gfx[bit] === 1) {\r\n                                    this.V[0xF] = 1;\r\n                                }\r\n                                this.gfx[bit] = this.gfx[bit] ^ 1;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.drawFlag = true;\r\n                    this.pc += 2;\r\n                    this.log(opcode, \"Drawing sprite to (V\" + x + \": \" + this.V[x] + \", \" +\r\n                        (\"V\" + y + \": \" + this.V[y] + \") with height of \" + height));\r\n                }\r\n                break;\r\n            case 0xE000:\r\n                {\r\n                    var x = (opcode & 0x0F00) >> 8;\r\n                    switch (opcode & 0x00FF) {\r\n                        case 0x009E: // Skips the next instruction if the key stored in VX is pressed.\r\n                            if (this.keys[x] === 1) {\r\n                                this.pc += 4;\r\n                            }\r\n                            else {\r\n                                this.pc += 2;\r\n                            }\r\n                            this.log(opcode, \"Skip next if keys[\" + x + \"] (Pressed: \" + (this.keys[x] === 1) + \") is pressed.\");\r\n                            break;\r\n                        case 0x00A1: // Skips the next instruction if the key stored in VX isn't pressed.\r\n                            if (this.keys[x] === 0) {\r\n                                this.pc += 4;\r\n                            }\r\n                            else {\r\n                                this.pc += 2;\r\n                            }\r\n                            this.log(opcode, \"Skip next if keys[\" + x + \"] (Pressed: \" + (this.keys[x] === 0) + \") is not pressed.\");\r\n                            break;\r\n                        default:\r\n                            this.log(opcode, 'Unknown opcode');\r\n                            process.exit();\r\n                    }\r\n                }\r\n                break;\r\n            case 0xF000:\r\n                {\r\n                    var x = (opcode & 0x0F00) >> 8;\r\n                    switch (opcode & 0x00FF) {\r\n                        case 0x0007: // Sets Vx to the value of the delay timer\r\n                            this.V[x] = this.delayTimer;\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"Set V\" + x.toString(16) + \" to value of the delay timer\");\r\n                            break;\r\n                        case 0x0015: // Sets the delay timer to VX.\r\n                            this.delayTimer = opcode & 0x0F00 >> 8;\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"Set delay timer to: \" + x);\r\n                            break;\r\n                        case 0x0018: // Sets the sound timer to VX.\r\n                            this.soundTimer = opcode & 0x0F00 >> 8;\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"Set sound timer to: \" + x);\r\n                            break;\r\n                        case 0x001E: // Adds VX to I.\r\n                            this.I += this.V[x];\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"Add V\" + x + \" to I\");\r\n                            break;\r\n                        case 0x0029: // Sets I to the location of the sprite for the character in VX.\r\n                            this.I = x * 5;\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"Set I to location of character sprite: \" + x * 5);\r\n                            break;\r\n                        case 0x0033: // Stores the binary-coded decimal representation of VX,\r\n                            // with the most significant of three digits at the address in I,\r\n                            // the middle digit at I plus 1, and the least significant digit at I plus 2.\r\n                            // AKA: wat\r\n                            this.memory[this.I] = this.V[x] / 100;\r\n                            this.memory[this.I + 1] = (this.V[x] / 10) % 10;\r\n                            this.memory[this.I + 2] = (this.V[x] % 100) % 10;\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"I: \" + this.V[x] / 100 + \", \" +\r\n                                (\"I + 1: \" + (this.V[x] / 10) % 10 + \", \") +\r\n                                (\"I + 2: \" + (this.V[x] % 100) % 10));\r\n                            break;\r\n                        case 0x0055: // Stores V0 to VX in memory starting at address I.\r\n                            for (var i = 0; i <= x; i++) {\r\n                                this.memory[this.I + i] = this.V[i];\r\n                            }\r\n                            this.I += x + 1;\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"Dump registers\");\r\n                            break;\r\n                        case 0x0065: // Fills V0 to VX with values from memory starting at address I.\r\n                            for (var i = 0; i <= x; i++) {\r\n                                this.V[i] = this.memory[this.I + i];\r\n                            }\r\n                            this.I += (x) + 1;\r\n                            this.pc += 2;\r\n                            this.log(opcode, \"Load registers V0 to V\" + x);\r\n                            break;\r\n                        default:\r\n                            this.log(opcode, 'Unknown opcode');\r\n                            process.exit();\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                this.log(opcode, 'Unknown opcode');\r\n                process.exit();\r\n        }\r\n        // Update timers\r\n        if (this.delayTimer > 0) {\r\n            this.delayTimer--;\r\n        }\r\n        if (this.soundTimer > 0) {\r\n            this.soundTimer--;\r\n        }\r\n    };\r\n    return Chip8;\r\n}());\r\nexports.default = Chip8;\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./src/client/Chip8.ts?");

/***/ }),

/***/ "./src/client/app.ts":
/*!***************************!*\
  !*** ./src/client/app.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Chip8_1 = __webpack_require__(/*! ./Chip8 */ \"./src/client/Chip8.ts\");\r\nvar chip8 = new Chip8_1.default();\r\n\n\n//# sourceURL=webpack:///./src/client/app.ts?");

/***/ })

/******/ });